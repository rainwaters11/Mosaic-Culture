Here’s how you can prompt Replit to improve the **visual design** of the Featured Stories section and ensure it reflects a sleek, modern appearance while using actual featured stories:

---

### **Prompt for Replit: Improve Featured Stories Design**
> **Redesign the `Featured Stories` section of the Mosaic Culture app to reflect a sleek, modern look. The design should:**
>
> ### **1. Key Design Improvements**
> - **Layout**:
>   - Use a grid-based design to display stories in a clean, organized manner.
>   - Each story card should include:
>     - A prominent image or video thumbnail.
>     - The story title (bold and clear).
>     - A short description or excerpt.
>     - A "Read More" button styled consistently with the app’s theme.
> - **Styling**:
>   - Use the Mosaic Culture brand colors:
>     - Primary: #ffffff (White)
>     - Secondary: #000000 (Black)
>     - Accent: #ff5722 (Orange), #4caf50 (Green), #d32f2f (Red).
>   - Add smooth hover effects (e.g., scaling or shadowing on story cards).
>   - Include subtle animations for loading the section (e.g., fade-in or slide-up).
>
> ### **2. Example HTML and CSS**
> - **HTML**:
>   ```html
>   <section id="featured-stories">
>     <h2 class="section-title">Featured Stories</h2>
>     <div class="story-grid">
>       <!-- Story cards dynamically populated here -->
>     </div>
>   </section>
>   ```
>
> - **CSS**:
>   ```css
>   #featured-stories {
>     padding: 2rem;
>     background-color: #f5f5f5;
>   }
>   .section-title {
>     font-size: 2rem;
>     color: #000;
>     text-align: center;
>     margin-bottom: 1.5rem;
>   }
>   .story-grid {
>     display: grid;
>     grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
>     gap: 1.5rem;
>   }
>   .story-card {
>     background: #fff;
>     border: 1px solid #ddd;
>     border-radius: 8px;
>     overflow: hidden;
>     box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
>     transition: transform 0.2s, box-shadow 0.2s;
>   }
>   .story-card:hover {
>     transform: scale(1.03);
>     box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
>   }
>   .story-card img {
>     width: 100%;
>     height: auto;
>   }
>   .story-card-content {
>     padding: 1rem;
>   }
>   .story-card-title {
>     font-size: 1.2rem;
>     font-weight: bold;
>     color: #ff5722;
>     margin-bottom: 0.5rem;
>   }
>   .story-card-excerpt {
>     font-size: 0.9rem;
>     color: #555;
>     margin-bottom: 1rem;
>   }
>   .story-card button {
>     background: #4caf50;
>     color: #fff;
>     border: none;
>     border-radius: 4px;
>     padding: 0.5rem 1rem;
>     cursor: pointer;
>     transition: background-color 0.2s;
>   }
>   .story-card button:hover {
>     background: #388e3c;
>   }
>   ```
>
> ### **3. Populate with Actual Featured Stories**
> - Use real stories from the database or API to populate the section dynamically:
>   ```javascript
>   fetch('/api/featured-stories')
>     .then(response => response.json())
>     .then(data => {
>       const grid = document.querySelector('.story-grid');
>       data.forEach(story => {
>         const card = `
>           <div class="story-card">
>             <img src="${story.thumbnail}" alt="${story.title}">
>             <div class="story-card-content">
>               <h3 class="story-card-title">${story.title}</h3>
>               <p class="story-card-excerpt">${story.excerpt}</p>
>               <button onclick="viewStory(${story.id})">Read More</button>
>             </div>
>           </div>`;
>         grid.innerHTML += card;
>       });
>     });
>   ```

---

> ### **4. Test and Optimize**
> - Test the new design on desktop and mobile devices to ensure responsiveness.
> - Verify that featured stories load dynamically and display accurately.
> - Add graceful fallbacks (e.g., placeholder cards) if no stories are available.

---

### **Why This Works**
- **Modern Look**: The grid-based layout and animations make the section visually appealing.
- **Responsive Design**: Ensures it looks great on all devices.
- **Dynamic Content**: Uses actual data from the backend for authenticity and engagement.

Let me know if you’d like to refine this further or need help implementing it!