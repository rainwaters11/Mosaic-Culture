To prompt **Replit** effectively for implementing the features "Generate AI Illustration" and "Generate Audio Narration" as a top prompt engineer and developer, you need to clearly define the tasks, specify the APIs or tools to be used, and provide the desired functionality in detail.

Here's the **perfect prompt** to guide Replit:

---

### **Prompt for Replit**
> **Build and integrate the following AI-powered features for the Mosaic Culture app:**
>
> ### **Feature 1: Generate AI Illustration**
> - **Objective**: Create an AI-generated image based on the user's story.
> - **Requirements**:
>   1. Allow the user to input a short story or description via a text field.
>   2. Use an image-generation API (e.g., **DALL-E**, **Stable Diffusion**, or **DeepAI**) to create a culturally relevant image based on the story.
>   3. Display the generated image in the UI with options to download or save.
> - **Steps**:
>   - Set up an input form for users to enter their story or image description.
>   - Write a function to make an API request to DALL-E or Stable Diffusion, sending the story as a prompt.
>   - Display the API response (image URL or binary data) on the page.
> - **Example Implementation**:
>   ```python
>   import requests
>
>   def generate_image(prompt):
>       api_url = "https://api.openai.com/v1/images/generations"
>       headers = {"Authorization": "Bearer YOUR_API_KEY"}
>       data = {"prompt": prompt, "n": 1, "size": "512x512"}
>
>       response = requests.post(api_url, headers=headers, json=data)
>       if response.status_code == 200:
>           return response.json()["data"][0]["url"]
>       return "Error generating image"
>   ```
>   - Integrate the function with the UI to accept the user's story and display the resulting image.

---

> ### **Feature 2: Generate Audio Narration**
> - **Objective**: Use AI to create an audio version of the user's story.
> - **Requirements**:
>   1. Allow the user to input a story via a text field.
>   2. Use a text-to-speech API (e.g., **ElevenLabs**, **Google Text-to-Speech**, or **Amazon Polly**) to generate an audio narration.
>   3. Provide a player in the UI to listen to the audio and a download option for the generated file.
> - **Steps**:
>   - Create an input form for users to submit their story.
>   - Write a function to call the text-to-speech API and save the generated audio.
>   - Add an audio player element in the UI to play the generated file.
> - **Example Implementation**:
>   ```python
>   def generate_audio(story):
>       api_url = "https://api.elevenlabs.io/v1/text-to-speech"
>       headers = {"Authorization": "Bearer YOUR_API_KEY"}
>       data = {"text": story, "voice": "default"}
>
>       response = requests.post(api_url, headers=headers, json=data)
>       if response.status_code == 200:
>           with open("output.mp3", "wb") as f:
>               f.write(response.content)
>           return "output.mp3"
>       return "Error generating audio"
>   ```
>   - Integrate this function to handle user input and provide the generated audio in the app.

---

> ### **General Integration**
> 1. **Frontend**:
>    - Use HTML/CSS/JavaScript or a frontend framework to create:
>      - A text input form for the userâ€™s story.
>      - Buttons for generating the image or audio.
>      - A display area for the generated image and audio player.
> 2. **Backend**:
>    - Use Python to handle API requests and manage workflows.
>    - Save generated files (images or audio) in a storage solution (e.g., Cloudinary or local storage).
> 3. **Testing**:
>    - Test both APIs with sample inputs to ensure accurate outputs.
>    - Validate edge cases, such as invalid inputs or API failures.

---

> **Deliverables**:
> - A functional interface where users can input stories and generate AI images and audio narrations.
> - Backend integration with APIs for both features.
> - A seamless user experience with options to play, download, or share the generated content.

---

This prompt ensures Replit (and the developer) has a clear roadmap to implement the features, leveraging state-of-the-art AI tools while focusing on usability and seamless integration. Let me know if you'd like me to refine it further or assist with specific API integrations!