"""Add video_url to Story model

Revision ID: 442d8430b92e
Revises: 
Create Date: 2025-01-10 11:51:44.765006

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '442d8430b92e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comment')
    op.drop_table('user')
    op.drop_table('badge')
    op.drop_table('user_badge')
    op.drop_table('tag')
    op.drop_table('like')
    with op.batch_alter_table('stories', schema=None) as batch_op:
        batch_op.add_column(sa.Column('video_url', sa.String(length=500), nullable=True))
        batch_op.drop_column('storyboard_data')

    with op.batch_alter_table('story_tags', schema=None) as batch_op:
        batch_op.drop_constraint('story_tags_tag_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'tags', ['tag_id'], ['id'])
        batch_op.create_foreign_key(None, 'stories', ['story_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('story_tags', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('story_tags_tag_id_fkey', 'tag', ['tag_id'], ['id'])

    with op.batch_alter_table('stories', schema=None) as batch_op:
        batch_op.add_column(sa.Column('storyboard_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
        batch_op.drop_column('video_url')

    op.create_table('like',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('story_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='like_pkey')
    )
    op.create_table('tag',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tag_pkey'),
    sa.UniqueConstraint('name', name='tag_name_key')
    )
    op.create_table('user_badge',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('badge_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('earned_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['badge_id'], ['badge.id'], name='user_badge_badge_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user_badge_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_badge_pkey')
    )
    op.create_table('badge',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('icon', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('requirement', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='badge_pkey')
    )
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key'),
    sa.UniqueConstraint('username', name='user_username_key')
    )
    op.create_table('comment',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('story_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='comment_pkey')
    )
    # ### end Alembic commands ###
